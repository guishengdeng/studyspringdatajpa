<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!-- 同时加载多个spring配置文件可用  -->
    <!--Spring配置   ,classpath:applicationContext-security.xml-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml,classpath:applicationContext-security.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--SpringMVC配置-->
    <servlet>
        <!--
          如果不在servlet标签里面配置这段
           <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvcConfig.xml</param-value>
           </init-param>
            (SpringMVC核心配置文件 [<servlet-name>]-servlet.xml)
            则spring容器默认在WEB-INF目录下去加载名为[<servlet-name>]-servlet.xml
            [<servlet-name>]也就是（<servlet-name>标签的值，即：springmvc）如：spring-servlet.xml
            [<servlet-name>]标签值不固定，可以写成xxx等等很多任意你想取得名字，那么springmvc核心配置文件则叫
            xxx-servlet.xml（如果不按上述要求来配置核心文件则会报这个错
            ：org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from ServletContext resource [/WEB-INF/spring-servlet.xml];
            nested exception is java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/spring-servlet.xml]）
            如果配置了上述那段代码，则根据<param-value>classpath:springmvcConfig.xml</param-value>这个标签的值
            （classpath:springmvcConfig.xml）来加载springmvc核心配置文件。同样地，springmvcConfig.xml（springmvc核心配置文件）文件名任意取，
            （一般我们取名是顾名思义）如：xxx.xml文件
            如果配置了上述代码，spring容器，则不会按默认的要求来查找springmvc的核心配置文件，也就是
             <param-value>classpath:springmvcConfig.xml</param-value>标签的值，会把默认的springmvc核心配置文件给覆盖掉

             在开发中，常常使用的是添加上述代码（重要）

        -->
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvcConfig.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>*.action</url-pattern>
    </servlet-mapping>
    <!--post乱码过滤器  -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--SpringSecurity配置-->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--首页：当用户通过IP地址和端口号(或加工程名)，进行访问时，要显示的页面-->
    <welcome-file-list>
        <welcome-file>/WEB-INF/page/login.jsp</welcome-file>
    </welcome-file-list>

</web-app>